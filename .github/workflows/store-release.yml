name: Android Store Release (Auto)

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Debug – repo state
        shell: bash
        run: |
          set -euo pipefail
          pwd
          echo "----- repo top -----"
          ls -la
          echo "----- gradle dir -----"
          ls -la gradle || true

      # ⬇️ نولّد Gradle Wrapper 8.7 لو مش موجود
           - name: Ensure Gradle wrapper (8.7) if missing
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "./gradlew" ]; then
            echo "Bootstrapping Gradle wrapper 8.7"
            WRAP_VER=8.7
            mkdir -p gradle/wrapper
            printf '%s\n' \
              'distributionBase=GRADLE_USER_HOME' \
              'distributionPath=wrapper/dists' \
              "distributionUrl=https://services.gradle.org/distributions/gradle-${WRAP_VER}-bin.zip" \
              'zipStoreBase=GRADLE_USER_HOME' \
              'zipStorePath=wrapper/dists' \
              > gradle/wrapper/gradle-wrapper.properties

            # ✅ نجيب الـ JAR من الريبو الرسمي بدل Maven (اللي رجّع 404)
            curl -fsSL "https://github.com/gradle/gradle/raw/v${WRAP_VER}/gradle/wrapper/gradle-wrapper.jar" \
              -o gradle/wrapper/gradle-wrapper.jar

            printf '%s\n' \
              '#!/usr/bin/env sh' \
              'DIR="$(cd "$(dirname "$0")" && pwd)"' \
              'JAVA_EXE="${JAVA_HOME}/bin/java"' \
              'if [ ! -x "$JAVA_EXE" ]; then JAVA_EXE="$(command -v java)"; fi' \
              'exec "$JAVA_EXE" -Dorg.gradle.appname=gradlew -classpath "$DIR/gradle/wrapper/gradle-wrapper.jar" org.gradle.wrapper.GradleWrapperMain "$@"' \
              > gradlew

            chmod +x gradlew
          else
            echo "Gradle wrapper already present ✅"
          fi
          ./gradlew --version

      - name: Prepare keystore (optional)
        shell: bash
        env:
          KS_B64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          set -euo pipefail
          if [ -n "${KS_B64:-}" ]; then
            echo "$KS_B64" | base64 -d > "$GITHUB_WORKSPACE/release.jks"
            echo "ANDROID_KEYSTORE=$GITHUB_WORKSPACE/release.jks" >> "$GITHUB_ENV"
            echo "🔐 Keystore decoded."
          else
            echo "ℹ️ No ANDROID_KEYSTORE_BASE64 provided — will build unsigned."
          fi

      - name: Build AAB (auto)
        shell: bash
        env:
          ANDROID_KEYSTORE: ${{ env.ANDROID_KEYSTORE }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -euo pipefail
          chmod +x ./gradlew
          if ./gradlew :app:tasks --all | grep -q '^bundleStoreRelease'; then
            TASK=':app:bundleStoreRelease'
          else
            TASK=':app:bundleRelease'
          fi
          echo "Using task: $TASK"
          ./gradlew $TASK --stacktrace --no-daemon

      - name: Locate AAB
        id: out
        shell: bash
        run: |
          set -euo pipefail
          AAB=""
          for f in app/build/outputs/bundle/storeRelease/*.aab app/build/outputs/bundle/release/*.aab; do
            if [ -f "$f" ]; then AAB="$f"; break; fi
          done
          if [ -z "$AAB" ]; then
            echo "No AAB found"
            ls -R app/build/outputs || true
            exit 1
          fi
          echo "AAB=$AAB" >> "$GITHUB_OUTPUT"
          echo "Found $AAB"

      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: app-store-release.aab
          path: ${{ steps.out.outputs.AAB }}
